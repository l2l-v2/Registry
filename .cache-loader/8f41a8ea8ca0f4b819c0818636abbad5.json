{"remainingRequest":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/thread-loader/dist/cjs.js??ref--10-2!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/ts-loader/index.js??ref--10-3!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/admin/metrics/metrics.component.ts","dependencies":[{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/admin/metrics/metrics.component.ts","mtime":1539162063836},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular2-template-loader/index.js","mtime":1536032724656},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/cache-loader/dist/cjs.js","mtime":1536032729131},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/thread-loader/dist/cjs.js","mtime":1536032751315},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/ts-loader/index.js","mtime":1536032751573},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js","mtime":1538211611370},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js","mtime":1536032751850}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar ng_bootstrap_1 = require(\"@ng-bootstrap/ng-bootstrap\");\nvar metrics_modal_component_1 = require(\"./metrics-modal.component\");\nvar metrics_service_1 = require(\"./metrics.service\");\nvar shared_1 = require(\"app/shared\");\nvar JhiMetricsMonitoringComponent = /** @class */ (function () {\n    function JhiMetricsMonitoringComponent(modalService, metricsService, routesService) {\n        this.modalService = modalService;\n        this.metricsService = metricsService;\n        this.routesService = routesService;\n        this.metrics = {};\n        this.cachesStats = {};\n        this.servicesStats = {};\n        this.updatingMetrics = true;\n        this.JCACHE_KEY = 'jcache.statistics';\n    }\n    JhiMetricsMonitoringComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscription = this.routesService.routeChanged$.subscribe(function (route) {\n            _this.activeRoute = route;\n            _this.displayActiveRouteMetrics();\n        });\n    };\n    JhiMetricsMonitoringComponent.prototype.refresh = function () {\n        this.routesService.reloadRoutes();\n    };\n    JhiMetricsMonitoringComponent.prototype.displayActiveRouteMetrics = function () {\n        var _this = this;\n        this.updatingMetrics = true;\n        if (this.activeRoute && this.activeRoute.status !== 'DOWN') {\n            this.metricsService.getInstanceMetrics(this.activeRoute).subscribe(function (metrics) {\n                _this.metrics = metrics;\n                _this.updatingMetrics = false;\n                _this.servicesStats = {};\n                _this.cachesStats = {};\n                Object.keys(metrics.timers).forEach(function (key) {\n                    var value = metrics.timers[key];\n                    if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                        _this.servicesStats[key] = value;\n                    }\n                });\n                Object.keys(metrics.gauges).forEach(function (key) {\n                    if (key.indexOf('jcache.statistics') !== -1) {\n                        var value = metrics.gauges[key].value;\n                        // remove gets or puts\n                        var index = key.lastIndexOf('.');\n                        var newKey = key.substr(0, index);\n                        // Keep the name of the domain\n                        _this.cachesStats[newKey] = {\n                            name: _this.JCACHE_KEY.length,\n                            value: value\n                        };\n                    }\n                });\n            }, function (error) {\n                if (error.status === 503 || error.status === 500 || error.status === 404) {\n                    if (error.status === 500 || error.status === 404) {\n                        _this.routesService.routeDown(_this.activeRoute);\n                    }\n                }\n            });\n        }\n        else {\n            this.routesService.routeDown(this.activeRoute);\n        }\n    };\n    JhiMetricsMonitoringComponent.prototype.refreshThreadDumpData = function () {\n        var _this = this;\n        this.metricsService.instanceThreadDump(this.activeRoute).subscribe(function (data) {\n            var modalRef = _this.modalService.open(metrics_modal_component_1.JhiMetricsMonitoringModalComponent, { size: 'lg' });\n            modalRef.componentInstance.threadDump = data;\n            modalRef.result.then(function (result) {\n                // Left blank intentionally, nothing to do here\n            }, function (reason) {\n                // Left blank intentionally, nothing to do here\n            });\n        });\n    };\n    JhiMetricsMonitoringComponent.prototype.filterNaN = function (input) {\n        if (isNaN(input)) {\n            return 0;\n        }\n        return input;\n    };\n    JhiMetricsMonitoringComponent.prototype.ngOnDestroy = function () {\n        // prevent memory leak when component destroyed\n        this.subscription.unsubscribe();\n    };\n    JhiMetricsMonitoringComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'jhi-metrics',\n            templateUrl: './metrics.component.html'\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ng_bootstrap_1.NgbModal !== \"undefined\" && ng_bootstrap_1.NgbModal) === \"function\" && _a || Object, typeof (_b = typeof metrics_service_1.JhiMetricsService !== \"undefined\" && metrics_service_1.JhiMetricsService) === \"function\" && _b || Object, typeof (_c = typeof shared_1.JhiRoutesService !== \"undefined\" && shared_1.JhiRoutesService) === \"function\" && _c || Object])\n    ], JhiMetricsMonitoringComponent);\n    return JhiMetricsMonitoringComponent;\n    var _a, _b, _c;\n}());\nexports.JhiMetricsMonitoringComponent = JhiMetricsMonitoringComponent;\n",{"version":3,"file":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/admin/metrics/metrics.component.ts","sourceRoot":"","sources":["/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/admin/metrics/metrics.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { JhiMetricsMonitoringModalComponent } from './metrics-modal.component';\nimport { JhiMetricsService } from './metrics.service';\nimport { JhiRoutesService, Route } from 'app/shared';\n\n@Component({\n    selector: 'jhi-metrics',\n    templateUrl: './metrics.component.html'\n})\nexport class JhiMetricsMonitoringComponent implements OnInit, OnDestroy {\n    metrics: any = {};\n    cachesStats: any = {};\n    servicesStats: any = {};\n    updatingMetrics = true;\n    JCACHE_KEY: string;\n\n    activeRoute: Route;\n    subscription: Subscription;\n\n    constructor(private modalService: NgbModal, private metricsService: JhiMetricsService, private routesService: JhiRoutesService) {\n        this.JCACHE_KEY = 'jcache.statistics';\n    }\n\n    ngOnInit() {\n        this.subscription = this.routesService.routeChanged$.subscribe((route) => {\n            this.activeRoute = route;\n            this.displayActiveRouteMetrics();\n        });\n    }\n\n    refresh() {\n        this.routesService.reloadRoutes();\n    }\n\n    displayActiveRouteMetrics() {\n        this.updatingMetrics = true;\n        if (this.activeRoute && this.activeRoute.status !== 'DOWN') {\n            this.metricsService.getInstanceMetrics(this.activeRoute).subscribe(\n                (metrics) => {\n                    this.metrics = metrics;\n                    this.updatingMetrics = false;\n                    this.servicesStats = {};\n                    this.cachesStats = {};\n                    Object.keys(metrics.timers).forEach((key) => {\n                        const value = metrics.timers[key];\n                        if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                            this.servicesStats[key] = value;\n                        }\n                    });\n                    Object.keys(metrics.gauges).forEach((key) => {\n                        if (key.indexOf('jcache.statistics') !== -1) {\n                            const value = metrics.gauges[key].value;\n                            // remove gets or puts\n                            const index = key.lastIndexOf('.');\n                            const newKey = key.substr(0, index);\n\n                            // Keep the name of the domain\n                            this.cachesStats[newKey] = {\n                                name: this.JCACHE_KEY.length,\n                                value\n                            };\n                        }\n                    });\n                },\n                (error) => {\n                    if (error.status === 503 || error.status === 500 || error.status === 404) {\n                        if (error.status === 500 || error.status === 404) {\n                            this.routesService.routeDown(this.activeRoute);\n                        }\n                    }\n                }\n            );\n        } else {\n            this.routesService.routeDown(this.activeRoute);\n        }\n    }\n\n    refreshThreadDumpData() {\n        this.metricsService.instanceThreadDump(this.activeRoute).subscribe((data) => {\n            const modalRef = this.modalService.open(JhiMetricsMonitoringModalComponent, { size: 'lg' });\n            modalRef.componentInstance.threadDump = data;\n            modalRef.result.then(\n                (result) => {\n                    // Left blank intentionally, nothing to do here\n                },\n                (reason) => {\n                    // Left blank intentionally, nothing to do here\n                }\n            );\n        });\n    }\n\n    filterNaN(input) {\n        if (isNaN(input)) {\n            return 0;\n        }\n        return input;\n    }\n\n    ngOnDestroy() {\n        // prevent memory leak when component destroyed\n        this.subscription.unsubscribe();\n    }\n}\n"]}]}