{"remainingRequest":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/thread-loader/dist/cjs.js??ref--10-2!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/ts-loader/index.js??ref--10-3!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/admin/configuration/configuration.service.ts","dependencies":[{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/admin/configuration/configuration.service.ts","mtime":1539162063832},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular2-template-loader/index.js","mtime":1536032724656},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/cache-loader/dist/cjs.js","mtime":1536032729131},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/thread-loader/dist/cjs.js","mtime":1536032751315},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/ts-loader/index.js","mtime":1536032751573},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js","mtime":1538211611370},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js","mtime":1536032751850}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/common/http\");\nvar JhiConfigurationService = /** @class */ (function () {\n    function JhiConfigurationService(http) {\n        this.http = http;\n    }\n    JhiConfigurationService.prototype.getConfigs = function (prefix) {\n        var _this = this;\n        if (prefix === void 0) { prefix = ''; }\n        return this.http.get(prefix + 'management/configprops', { observe: 'response' }).map(function (res) {\n            var properties = [];\n            var propertiesObject = _this.getConfigPropertiesObjects(res.body);\n            for (var key in propertiesObject) {\n                if (propertiesObject.hasOwnProperty(key)) {\n                    properties.push(propertiesObject[key]);\n                }\n            }\n            return properties.sort(function (propertyA, propertyB) {\n                return propertyA.prefix === propertyB.prefix ? 0 : propertyA.prefix < propertyB.prefix ? -1 : 1;\n            });\n        });\n    };\n    JhiConfigurationService.prototype.getConfigPropertiesObjects = function (res) {\n        // This code is for Spring Boot 2\n        if (res['contexts'] !== undefined) {\n            for (var key in res['contexts']) {\n                // If the key is not bootstrap, it will be the ApplicationContext Id\n                // For default app, it is applicationName\n                // For microservice, it is applicationName-1\n                if (!key.startsWith('bootstrap')) {\n                    return res['contexts'][key]['beans'];\n                }\n            }\n        }\n        // Otherwise, return res.json(), which is for Spring Boot 1\n        return res;\n    };\n    JhiConfigurationService.prototype.getInstanceConfigs = function (instance) {\n        if (instance && instance.prefix && instance.prefix.length > 0) {\n            return this.getConfigs(instance.prefix + '/');\n        }\n        return this.getConfigs();\n    };\n    JhiConfigurationService.prototype.getEnv = function (prefix) {\n        if (prefix === void 0) { prefix = ''; }\n        return this.http.get(prefix + 'management/env', { observe: 'response' }).map(function (res) {\n            var properties = {};\n            var propertiesObject = res.body;\n            if (propertiesObject['propertySources'] !== undefined) {\n                // This is for Spring Boot 2\n                var propertySources = propertiesObject['propertySources'];\n                for (var _i = 0, propertySources_1 = propertySources; _i < propertySources_1.length; _i++) {\n                    var propertyObject = propertySources_1[_i];\n                    var name = propertyObject['name'];\n                    var detailProperties = propertyObject['properties'];\n                    var vals = [];\n                    for (var keyDetail in detailProperties) {\n                        if (detailProperties.hasOwnProperty(keyDetail)) {\n                            vals.push({ key: keyDetail, val: detailProperties[keyDetail]['value'] });\n                        }\n                    }\n                    properties[name] = vals;\n                }\n            }\n            else {\n                // This is for Spring Boot 1\n                for (var key in propertiesObject) {\n                    if (propertiesObject.hasOwnProperty(key)) {\n                        var valsObject = propertiesObject[key];\n                        var vals = [];\n                        for (var valKey in valsObject) {\n                            if (valsObject.hasOwnProperty(valKey)) {\n                                vals.push({ key: valKey, val: valsObject[valKey] });\n                            }\n                        }\n                        properties[key] = vals;\n                    }\n                }\n            }\n            return properties;\n        });\n    };\n    JhiConfigurationService.prototype.getInstanceEnv = function (instance) {\n        if (instance && instance.prefix && instance.prefix.length > 0) {\n            return this.getEnv(instance.prefix + '/');\n        }\n        return this.getEnv();\n    };\n    JhiConfigurationService = tslib_1.__decorate([\n        core_1.Injectable(),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" && _a || Object])\n    ], JhiConfigurationService);\n    return JhiConfigurationService;\n    var _a;\n}());\nexports.JhiConfigurationService = JhiConfigurationService;\n",{"version":3,"file":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/admin/configuration/configuration.service.ts","sourceRoot":"","sources":["/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/admin/configuration/configuration.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\n\nimport { Route } from 'app/shared';\n\n@Injectable()\nexport class JhiConfigurationService {\n    constructor(private http: HttpClient) {}\n\n    getConfigs(prefix: String = ''): Observable<any> {\n        return this.http.get(prefix + 'management/configprops', { observe: 'response' }).map((res: HttpResponse<any>) => {\n            const properties: any[] = [];\n            const propertiesObject = this.getConfigPropertiesObjects(res.body);\n            for (const key in propertiesObject) {\n                if (propertiesObject.hasOwnProperty(key)) {\n                    properties.push(propertiesObject[key]);\n                }\n            }\n\n            return properties.sort((propertyA, propertyB) => {\n                return propertyA.prefix === propertyB.prefix ? 0 : propertyA.prefix < propertyB.prefix ? -1 : 1;\n            });\n        });\n    }\n\n    getConfigPropertiesObjects(res: Object) {\n        // This code is for Spring Boot 2\n        if (res['contexts'] !== undefined) {\n            for (const key in res['contexts']) {\n                // If the key is not bootstrap, it will be the ApplicationContext Id\n                // For default app, it is applicationName\n                // For microservice, it is applicationName-1\n                if (!key.startsWith('bootstrap')) {\n                    return res['contexts'][key]['beans'];\n                }\n            }\n        }\n        // Otherwise, return res.json(), which is for Spring Boot 1\n        return res;\n    }\n\n    getInstanceConfigs(instance: Route): Observable<any> {\n        if (instance && instance.prefix && instance.prefix.length > 0) {\n            return this.getConfigs(instance.prefix + '/');\n        }\n        return this.getConfigs();\n    }\n\n    getEnv(prefix: String = ''): Observable<any> {\n        return this.http.get(prefix + 'management/env', { observe: 'response' }).map((res: HttpResponse<any>) => {\n            const properties: any = {};\n            const propertiesObject = res.body;\n\n            if (propertiesObject['propertySources'] !== undefined) {\n                // This is for Spring Boot 2\n                const propertySources = propertiesObject['propertySources'];\n                for (const propertyObject of propertySources) {\n                    const name = propertyObject['name'];\n                    const detailProperties = propertyObject['properties'];\n                    const vals: any[] = [];\n                    for (const keyDetail in detailProperties) {\n                        if (detailProperties.hasOwnProperty(keyDetail)) {\n                            vals.push({ key: keyDetail, val: detailProperties[keyDetail]['value'] });\n                        }\n                    }\n                    properties[name] = vals;\n                }\n            } else {\n                // This is for Spring Boot 1\n                for (const key in propertiesObject) {\n                    if (propertiesObject.hasOwnProperty(key)) {\n                        const valsObject = propertiesObject[key];\n                        const vals: any[] = [];\n                        for (const valKey in valsObject) {\n                            if (valsObject.hasOwnProperty(valKey)) {\n                                vals.push({ key: valKey, val: valsObject[valKey] });\n                            }\n                        }\n                        properties[key] = vals;\n                    }\n                }\n            }\n            return properties;\n        });\n    }\n\n    getInstanceEnv(instance: Route): Observable<any> {\n        if (instance && instance.prefix && instance.prefix.length > 0) {\n            return this.getEnv(instance.prefix + '/');\n        }\n        return this.getEnv();\n    }\n}\n"]}]}