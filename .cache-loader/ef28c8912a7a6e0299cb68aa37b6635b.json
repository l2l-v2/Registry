{"remainingRequest":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/thread-loader/dist/cjs.js??ref--10-2!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/ts-loader/index.js??ref--10-3!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/shared/routes/routes.service.ts","dependencies":[{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/shared/routes/routes.service.ts","mtime":1539162063848},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular2-template-loader/index.js","mtime":1536032724656},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/cache-loader/dist/cjs.js","mtime":1536032729131},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/thread-loader/dist/cjs.js","mtime":1536032751315},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/ts-loader/index.js","mtime":1536032751573},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js","mtime":1538211611370},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js","mtime":1536032751850}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/common/http\");\nvar Subject_1 = require(\"rxjs/Subject\");\nvar ngx_webstorage_1 = require(\"ngx-webstorage\");\nvar JhiRoutesService = /** @class */ (function () {\n    function JhiRoutesService(http, sessionStorage) {\n        this.http = http;\n        this.sessionStorage = sessionStorage;\n        // Observable sources\n        this.routeChangedSource = new Subject_1.Subject();\n        this.routeDownSource = new Subject_1.Subject();\n        this.routeReloadSource = new Subject_1.Subject();\n        this.routeChanged$ = this.routeChangedSource.asObservable();\n        this.routeDown$ = this.routeDownSource.asObservable();\n        this.routeReload$ = this.routeReloadSource.asObservable();\n    }\n    JhiRoutesService.prototype.findAll = function () {\n        return this.http.get('/api/routes');\n    };\n    JhiRoutesService.prototype.routeChange = function (route) {\n        this.routeChangedSource.next(route);\n    };\n    JhiRoutesService.prototype.reloadRoutes = function () {\n        this.routeReloadSource.next(true);\n    };\n    JhiRoutesService.prototype.routeDown = function (route) {\n        this.routeDownSource.next(route);\n    };\n    JhiRoutesService.prototype.getSelectedInstance = function () {\n        return this.sessionStorage.retrieve('instanceId');\n    };\n    JhiRoutesService.prototype.storeSelectedInstance = function (instance) {\n        this.sessionStorage.store('instanceId', instance);\n    };\n    JhiRoutesService = tslib_1.__decorate([\n        core_1.Injectable(),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" && _a || Object, typeof (_b = typeof ngx_webstorage_1.SessionStorageService !== \"undefined\" && ngx_webstorage_1.SessionStorageService) === \"function\" && _b || Object])\n    ], JhiRoutesService);\n    return JhiRoutesService;\n    var _a, _b;\n}());\nexports.JhiRoutesService = JhiRoutesService;\n",{"version":3,"file":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/shared/routes/routes.service.ts","sourceRoot":"","sources":["/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/shared/routes/routes.service.ts"],"names":[],"mappings":";;;AAAA,sCAA2C;AAC3C,6CAAkD;AAElD,wCAAuC;AAEvC,iDAAuD;AAGvD;IASI,0BAAoB,IAAgB,EAAU,cAAqC;QAA/D,SAAI,GAAJ,IAAI,CAAY;QAAU,mBAAc,GAAd,cAAc,CAAuB;QARnF,qBAAqB;QACb,uBAAkB,GAAG,IAAI,iBAAO,EAAS,CAAC;QAC1C,oBAAe,GAAG,IAAI,iBAAO,EAAS,CAAC;QACvC,sBAAiB,GAAG,IAAI,iBAAO,EAAW,CAAC;QAM/C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;QAC5D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;QACtD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;IAC9D,CAAC;IAED,kCAAO,GAAP;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAU,aAAa,CAAC,CAAC;IACjD,CAAC;IAED,sCAAW,GAAX,UAAY,KAAY;QACpB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;IAED,uCAAY,GAAZ;QACI,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAED,oCAAS,GAAT,UAAU,KAAY;QAClB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAED,8CAAmB,GAAnB;QACI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;IACtD,CAAC;IAED,gDAAqB,GAArB,UAAsB,QAAQ;QAC1B,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;IACtD,CAAC;IArCQ,gBAAgB;QAD5B,iBAAU,EAAE;qEAUiB,iBAAU,oBAAV,iBAAU,sDAA0B,sCAAqB,oBAArB,sCAAqB;OAT1E,gBAAgB,CAsC5B;IAAD,uBAAC;;CAAA,AAtCD,IAsCC;AAtCY,4CAAgB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { Route } from './route.model';\nimport { SessionStorageService } from 'ngx-webstorage';\n\n@Injectable()\nexport class JhiRoutesService {\n    // Observable sources\n    private routeChangedSource = new Subject<Route>();\n    private routeDownSource = new Subject<Route>();\n    private routeReloadSource = new Subject<boolean>();\n    routeChanged$: Observable<Route>;\n    routeDown$: Observable<Route>;\n    routeReload$: Observable<boolean>;\n\n    constructor(private http: HttpClient, private sessionStorage: SessionStorageService) {\n        this.routeChanged$ = this.routeChangedSource.asObservable();\n        this.routeDown$ = this.routeDownSource.asObservable();\n        this.routeReload$ = this.routeReloadSource.asObservable();\n    }\n\n    findAll(): Observable<Route[]> {\n        return this.http.get<Route[]>('/api/routes');\n    }\n\n    routeChange(route: Route) {\n        this.routeChangedSource.next(route);\n    }\n\n    reloadRoutes() {\n        this.routeReloadSource.next(true);\n    }\n\n    routeDown(route: Route) {\n        this.routeDownSource.next(route);\n    }\n\n    getSelectedInstance() {\n        return this.sessionStorage.retrieve('instanceId');\n    }\n\n    storeSelectedInstance(instance) {\n        this.sessionStorage.store('instanceId', instance);\n    }\n}\n"]}]}