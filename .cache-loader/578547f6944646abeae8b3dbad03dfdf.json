{"remainingRequest":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/thread-loader/dist/cjs.js??ref--10-2!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/ts-loader/index.js??ref--10-3!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/admin/health/health.component.ts","dependencies":[{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/admin/health/health.component.ts","mtime":1539162063832},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular2-template-loader/index.js","mtime":1536032724656},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/cache-loader/dist/cjs.js","mtime":1536032729131},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/thread-loader/dist/cjs.js","mtime":1536032751315},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/ts-loader/index.js","mtime":1536032751573},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js","mtime":1538211611370},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js","mtime":1536032751850}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar ng_bootstrap_1 = require(\"@ng-bootstrap/ng-bootstrap\");\nvar health_service_1 = require(\"./health.service\");\nvar health_modal_component_1 = require(\"./health-modal.component\");\nvar shared_1 = require(\"app/shared\");\nvar JhiHealthCheckComponent = /** @class */ (function () {\n    function JhiHealthCheckComponent(modalService, healthService, routesService) {\n        this.modalService = modalService;\n        this.healthService = healthService;\n        this.routesService = routesService;\n    }\n    JhiHealthCheckComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscription = this.routesService.routeChanged$.subscribe(function (route) {\n            _this.activeRoute = route;\n            _this.displayActiveRouteHealth();\n        });\n    };\n    JhiHealthCheckComponent.prototype.displayActiveRouteHealth = function () {\n        var _this = this;\n        this.updatingHealth = true;\n        if (this.activeRoute && this.activeRoute.status !== 'DOWN') {\n            this.healthService.checkInstanceHealth(this.activeRoute).subscribe(function (health) {\n                _this.healthData = _this.healthService.transformHealthData(health);\n                _this.updatingHealth = false;\n            }, function (error) {\n                if (error.status === 503 || error.status === 500 || error.status === 404) {\n                    _this.healthData = _this.healthService.transformHealthData(error.json());\n                    _this.updatingHealth = false;\n                    if (error.status === 500 || error.status === 404) {\n                        _this.routesService.routeDown(_this.activeRoute);\n                    }\n                }\n            });\n        }\n        else {\n            this.routesService.routeDown(this.activeRoute);\n        }\n    };\n    // user click\n    JhiHealthCheckComponent.prototype.showHealth = function (health) {\n        var modalRef = this.modalService.open(health_modal_component_1.JhiHealthModalComponent);\n        modalRef.componentInstance.currentHealth = health;\n        modalRef.result.then(function (result) {\n            // Left blank intentionally, nothing to do here\n        }, function (reason) {\n            // Left blank intentionally, nothing to do here\n        });\n    };\n    JhiHealthCheckComponent.prototype.baseName = function (name) {\n        return this.healthService.getBaseName(name);\n    };\n    // user click\n    JhiHealthCheckComponent.prototype.getBadgeClass = function (statusState) {\n        if (!statusState || statusState !== 'UP') {\n            return 'badge-danger';\n        }\n        else {\n            return 'badge-success';\n        }\n    };\n    JhiHealthCheckComponent.prototype.subSystemName = function (name) {\n        return this.healthService.getSubSystemName(name);\n    };\n    JhiHealthCheckComponent.prototype.ngOnDestroy = function () {\n        // prevent memory leak when component destroyed\n        this.subscription.unsubscribe();\n    };\n    JhiHealthCheckComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'jhi-health',\n            templateUrl: './health.component.html'\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ng_bootstrap_1.NgbModal !== \"undefined\" && ng_bootstrap_1.NgbModal) === \"function\" && _a || Object, typeof (_b = typeof health_service_1.JhiHealthService !== \"undefined\" && health_service_1.JhiHealthService) === \"function\" && _b || Object, typeof (_c = typeof shared_1.JhiRoutesService !== \"undefined\" && shared_1.JhiRoutesService) === \"function\" && _c || Object])\n    ], JhiHealthCheckComponent);\n    return JhiHealthCheckComponent;\n    var _a, _b, _c;\n}());\nexports.JhiHealthCheckComponent = JhiHealthCheckComponent;\n",{"version":3,"file":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/admin/health/health.component.ts","sourceRoot":"","sources":["/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/admin/health/health.component.ts"],"names":[],"mappings":";;;AAAA,sCAA6D;AAE7D,2DAAsD;AAEtD,mDAAoD;AACpD,mEAAmE;AAEnE,qCAAqD;AAMrD;IAMI,iCAAoB,YAAsB,EAAU,aAA+B,EAAU,aAA+B;QAAxG,iBAAY,GAAZ,YAAY,CAAU;QAAU,kBAAa,GAAb,aAAa,CAAkB;QAAU,kBAAa,GAAb,aAAa,CAAkB;IAAG,CAAC;IAEhI,0CAAQ,GAAR;QAAA,iBAKC;QAJG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,SAAS,CAAC,UAAC,KAAK;YACjE,KAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,KAAI,CAAC,wBAAwB,EAAE,CAAC;QACpC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,0DAAwB,GAAxB;QAAA,iBAqBC;QApBG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;YACzD,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,SAAS,CAC9D,UAAC,MAAM;gBACH,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;gBACjE,KAAI,CAAC,cAAc,GAAG,KAAK,CAAC;YAChC,CAAC,EACD,UAAC,KAAK;gBACF,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;oBACvE,KAAI,CAAC,UAAU,GAAG,KAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;oBACvE,KAAI,CAAC,cAAc,GAAG,KAAK,CAAC;oBAC5B,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;wBAC/C,KAAI,CAAC,aAAa,CAAC,SAAS,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC;oBACnD,CAAC;gBACL,CAAC;YACL,CAAC,CACJ,CAAC;QACN,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACnD,CAAC;IACL,CAAC;IAED,aAAa;IACb,4CAAU,GAAV,UAAW,MAAW;QAClB,IAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,gDAAuB,CAAC,CAAC;QACjE,QAAQ,CAAC,iBAAiB,CAAC,aAAa,GAAG,MAAM,CAAC;QAClD,QAAQ,CAAC,MAAM,CAAC,IAAI,CAChB,UAAC,MAAM;YACH,+CAA+C;QACnD,CAAC,EACD,UAAC,MAAM;YACH,+CAA+C;QACnD,CAAC,CACJ,CAAC;IACN,CAAC;IAED,0CAAQ,GAAR,UAAS,IAAY;QACjB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC;IAED,aAAa;IACb,+CAAa,GAAb,UAAc,WAAW;QACrB,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,WAAW,KAAK,IAAI,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,cAAc,CAAC;QAC1B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,eAAe,CAAC;QAC3B,CAAC;IACL,CAAC;IAED,+CAAa,GAAb,UAAc,IAAY;QACtB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC;IAED,6CAAW,GAAX;QACI,+CAA+C;QAC/C,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;IACpC,CAAC;IAxEQ,uBAAuB;QAJnC,gBAAS,CAAC;YACP,QAAQ,EAAE,YAAY;YACtB,WAAW,EAAE,yBAAyB;SACzC,CAAC;qEAOoC,uBAAQ,oBAAR,uBAAQ,sDAAyB,iCAAgB,oBAAhB,iCAAgB,sDAAyB,yBAAgB,oBAAhB,yBAAgB;OANnH,uBAAuB,CAyEnC;IAAD,8BAAC;;CAAA,AAzED,IAyEC;AAzEY,0DAAuB","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { JhiHealthService } from './health.service';\nimport { JhiHealthModalComponent } from './health-modal.component';\n\nimport { JhiRoutesService, Route } from 'app/shared';\n\n@Component({\n    selector: 'jhi-health',\n    templateUrl: './health.component.html'\n})\nexport class JhiHealthCheckComponent implements OnInit, OnDestroy {\n    healthData: any;\n    updatingHealth: boolean;\n    activeRoute: Route;\n    subscription: Subscription;\n\n    constructor(private modalService: NgbModal, private healthService: JhiHealthService, private routesService: JhiRoutesService) {}\n\n    ngOnInit() {\n        this.subscription = this.routesService.routeChanged$.subscribe((route) => {\n            this.activeRoute = route;\n            this.displayActiveRouteHealth();\n        });\n    }\n\n    displayActiveRouteHealth() {\n        this.updatingHealth = true;\n        if (this.activeRoute && this.activeRoute.status !== 'DOWN') {\n            this.healthService.checkInstanceHealth(this.activeRoute).subscribe(\n                (health) => {\n                    this.healthData = this.healthService.transformHealthData(health);\n                    this.updatingHealth = false;\n                },\n                (error) => {\n                    if (error.status === 503 || error.status === 500 || error.status === 404) {\n                        this.healthData = this.healthService.transformHealthData(error.json());\n                        this.updatingHealth = false;\n                        if (error.status === 500 || error.status === 404) {\n                            this.routesService.routeDown(this.activeRoute);\n                        }\n                    }\n                }\n            );\n        } else {\n            this.routesService.routeDown(this.activeRoute);\n        }\n    }\n\n    // user click\n    showHealth(health: any) {\n        const modalRef = this.modalService.open(JhiHealthModalComponent);\n        modalRef.componentInstance.currentHealth = health;\n        modalRef.result.then(\n            (result) => {\n                // Left blank intentionally, nothing to do here\n            },\n            (reason) => {\n                // Left blank intentionally, nothing to do here\n            }\n        );\n    }\n\n    baseName(name: string) {\n        return this.healthService.getBaseName(name);\n    }\n\n    // user click\n    getBadgeClass(statusState) {\n        if (!statusState || statusState !== 'UP') {\n            return 'badge-danger';\n        } else {\n            return 'badge-success';\n        }\n    }\n\n    subSystemName(name: string) {\n        return this.healthService.getSubSystemName(name);\n    }\n\n    ngOnDestroy() {\n        // prevent memory leak when component destroyed\n        this.subscription.unsubscribe();\n    }\n}\n"]}]}