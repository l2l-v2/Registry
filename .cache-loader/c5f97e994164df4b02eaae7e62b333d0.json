{"remainingRequest":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/thread-loader/dist/cjs.js??ref--10-2!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/ts-loader/index.js??ref--10-3!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/shared/routes/route-selector.component.ts","dependencies":[{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/shared/routes/route-selector.component.ts","mtime":1539162063844},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular2-template-loader/index.js","mtime":1536032724656},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/cache-loader/dist/cjs.js","mtime":1536032729131},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/thread-loader/dist/cjs.js","mtime":1536032751315},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/ts-loader/index.js","mtime":1536032751573},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js","mtime":1538211611370},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js","mtime":1536032751850}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar routes_service_1 = require(\"./routes.service\");\nvar refresh_service_1 = require(\"app/shared/refresh/refresh.service\");\nvar JhiRouteSelectorComponent = /** @class */ (function () {\n    function JhiRouteSelectorComponent(routesService, refreshService) {\n        this.routesService = routesService;\n        this.refreshService = refreshService;\n        this.searchedInstance = '';\n    }\n    JhiRouteSelectorComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.activeRoute = this.routesService.getSelectedInstance();\n        this.updateRoute();\n        this.refreshReloadSubscription = this.refreshService.refreshReload$.subscribe(function (reload) { return _this.updateRoute(); });\n        this.routeReloadSubscription = this.routesService.routeReload$.subscribe(function (reload) { return _this.updateRoute(); });\n        this.routeDownSubscription = this.routesService.routeDown$.subscribe(function (route) {\n            _this.downRoute(route);\n            _this.setActiveRoute(null);\n        });\n    };\n    JhiRouteSelectorComponent.prototype.ngOnDestroy = function () {\n        /** prevent memory leak when component destroyed **/\n        this.routeReloadSubscription.unsubscribe();\n        this.routeDownSubscription.unsubscribe();\n        this.refreshReloadSubscription.unsubscribe();\n    };\n    /** Change active route only if exists, else choose Registry **/\n    JhiRouteSelectorComponent.prototype.setActiveRoute = function (instance) {\n        if (instance && this.routes && this.routes.findIndex(function (r) { return r.appName === instance.appName; }) !== -1) {\n            this.activeRoute = instance;\n        }\n        else if (this.routes && this.routes.length > 0) {\n            this.activeRoute = this.routes[0];\n        }\n        this.routesService.storeSelectedInstance(this.activeRoute);\n        this.routesService.routeChange(this.activeRoute);\n    };\n    JhiRouteSelectorComponent.prototype.updateRoute = function () {\n        var _this = this;\n        this.updatingRoutes = true;\n        this.routesService.findAll().subscribe(function (routes) {\n            _this.savedRoutes = routes;\n            _this.routes = routes;\n            _this.searchedInstance = '';\n            if (_this.activeRoute) {\n                /** in case of new refresh call **/\n                _this.setActiveRoute(_this.activeRoute);\n            }\n            else if (routes.length > 0) {\n                _this.setActiveRoute(routes[0]);\n            }\n            _this.updatingRoutes = false;\n        }, function (error) {\n            if (error.status === 503 || error.status === 500 || error.status === 404) {\n                if (error.status === 500 || error.status === 404) {\n                    _this.downRoute(_this.activeRoute);\n                    _this.setActiveRoute(null);\n                }\n                _this.updatingRoutes = false;\n            }\n        });\n    };\n    JhiRouteSelectorComponent.prototype.downRoute = function (instance) {\n        if (instance) {\n            instance.status = 'DOWN';\n        }\n    };\n    /* ==========================================================================\n                                        UI PART\n     ========================================================================== */\n    JhiRouteSelectorComponent.prototype.getActiveRoute = function () {\n        return this.activeRoute.serviceId ? this.activeRoute.serviceId.toUpperCase() : this.activeRoute.appName.toUpperCase();\n    };\n    JhiRouteSelectorComponent.prototype.getBadgeClassRoute = function (route) {\n        if (route && !route.status) {\n            route.status = 'UP';\n        }\n        return this.getBadgeClass(route.status);\n    };\n    JhiRouteSelectorComponent.prototype.getBadgeClass = function (statusState) {\n        if (statusState && (statusState === 'UP' || statusState.toLowerCase() === 'starting')) {\n            return 'badge-success';\n        }\n        else {\n            return 'badge-danger';\n        }\n    };\n    JhiRouteSelectorComponent.prototype.state = function (route) {\n        if (route && route.status && route.status === 'DOWN') {\n            return 'disabled';\n        }\n        else if (route && route.serviceId === this.activeRoute.serviceId) {\n            return 'active';\n        }\n    };\n    JhiRouteSelectorComponent.prototype.searchByAppName = function () {\n        var _this = this;\n        if (this.searchedInstance === '') {\n            this.routes = this.savedRoutes;\n        }\n        else {\n            this.routes = this.savedRoutes.filter(function (route) {\n                return route.appName.includes(_this.searchedInstance);\n            });\n        }\n    };\n    /**\n     * Close the dropdown element.\n     * The dropdown can be closed directly in the HTML, but cause the warning\n     * (\"The method \"drop\" that you're trying to access does not exist in the class declaration.\").\n     * @param dropdown\n     */\n    JhiRouteSelectorComponent.prototype.closeDropDown = function (dropdown) {\n        if (dropdown) {\n            dropdown.close();\n        }\n    };\n    JhiRouteSelectorComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'jhi-route-selector',\n            templateUrl: './route-selector.component.html',\n            styleUrls: ['route-selector.component.scss']\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof routes_service_1.JhiRoutesService !== \"undefined\" && routes_service_1.JhiRoutesService) === \"function\" && _a || Object, typeof (_b = typeof refresh_service_1.JhiRefreshService !== \"undefined\" && refresh_service_1.JhiRefreshService) === \"function\" && _b || Object])\n    ], JhiRouteSelectorComponent);\n    return JhiRouteSelectorComponent;\n    var _a, _b;\n}());\nexports.JhiRouteSelectorComponent = JhiRouteSelectorComponent;\n",{"version":3,"file":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/shared/routes/route-selector.component.ts","sourceRoot":"","sources":["/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/shared/routes/route-selector.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { JhiRoutesService } from './routes.service';\nimport { Route } from './route.model';\nimport { NgbDropdown } from '@ng-bootstrap/ng-bootstrap';\nimport { JhiRefreshService } from 'app/shared/refresh/refresh.service';\n\n@Component({\n    selector: 'jhi-route-selector',\n    templateUrl: './route-selector.component.html',\n    styleUrls: ['route-selector.component.scss']\n})\nexport class JhiRouteSelectorComponent implements OnInit, OnDestroy {\n    activeRoute: Route;\n    routes: Route[];\n    savedRoutes: Route[];\n    updatingRoutes: boolean;\n    searchedInstance = '';\n    routeReloadSubscription: Subscription;\n    routeDownSubscription: Subscription;\n\n    refreshReloadSubscription: Subscription;\n\n    constructor(private routesService: JhiRoutesService, private refreshService: JhiRefreshService) {}\n\n    ngOnInit() {\n        this.activeRoute = this.routesService.getSelectedInstance();\n\n        this.updateRoute();\n        this.refreshReloadSubscription = this.refreshService.refreshReload$.subscribe((reload) => this.updateRoute());\n        this.routeReloadSubscription = this.routesService.routeReload$.subscribe((reload) => this.updateRoute());\n        this.routeDownSubscription = this.routesService.routeDown$.subscribe((route) => {\n            this.downRoute(route);\n            this.setActiveRoute(null);\n        });\n    }\n\n    ngOnDestroy() {\n        /** prevent memory leak when component destroyed **/\n        this.routeReloadSubscription.unsubscribe();\n        this.routeDownSubscription.unsubscribe();\n        this.refreshReloadSubscription.unsubscribe();\n    }\n\n    /** Change active route only if exists, else choose Registry **/\n    setActiveRoute(instance: Route) {\n        if (instance && this.routes && this.routes.findIndex((r) => r.appName === instance.appName) !== -1) {\n            this.activeRoute = instance;\n        } else if (this.routes && this.routes.length > 0) {\n            this.activeRoute = this.routes[0];\n        }\n        this.routesService.storeSelectedInstance(this.activeRoute);\n        this.routesService.routeChange(this.activeRoute);\n    }\n\n    private updateRoute() {\n        this.updatingRoutes = true;\n        this.routesService.findAll().subscribe(\n            (routes) => {\n                this.savedRoutes = routes;\n                this.routes = routes;\n                this.searchedInstance = '';\n\n                if (this.activeRoute) {\n                    /** in case of new refresh call **/\n                    this.setActiveRoute(this.activeRoute);\n                } else if (routes.length > 0) {\n                    this.setActiveRoute(routes[0]);\n                }\n                this.updatingRoutes = false;\n            },\n            (error) => {\n                if (error.status === 503 || error.status === 500 || error.status === 404) {\n                    if (error.status === 500 || error.status === 404) {\n                        this.downRoute(this.activeRoute);\n                        this.setActiveRoute(null);\n                    }\n                    this.updatingRoutes = false;\n                }\n            }\n        );\n    }\n\n    private downRoute(instance: Route) {\n        if (instance) {\n            instance.status = 'DOWN';\n        }\n    }\n\n    /* ==========================================================================\n                                        UI PART\n     ========================================================================== */\n\n    getActiveRoute() {\n        return this.activeRoute.serviceId ? this.activeRoute.serviceId.toUpperCase() : this.activeRoute.appName.toUpperCase();\n    }\n\n    getBadgeClassRoute(route: Route) {\n        if (route && !route.status) {\n            route.status = 'UP';\n        }\n        return this.getBadgeClass(route.status);\n    }\n\n    private getBadgeClass(statusState) {\n        if (statusState && (statusState === 'UP' || statusState.toLowerCase() === 'starting')) {\n            return 'badge-success';\n        } else {\n            return 'badge-danger';\n        }\n    }\n\n    state(route: Route) {\n        if (route && route.status && route.status === 'DOWN') {\n            return 'disabled';\n        } else if (route && route.serviceId === this.activeRoute.serviceId) {\n            return 'active';\n        }\n    }\n\n    searchByAppName() {\n        if (this.searchedInstance === '') {\n            this.routes = this.savedRoutes;\n        } else {\n            this.routes = this.savedRoutes.filter((route) => {\n                return route.appName.includes(this.searchedInstance);\n            });\n        }\n    }\n\n    /**\n     * Close the dropdown element.\n     * The dropdown can be closed directly in the HTML, but cause the warning\n     * (\"The method \"drop\" that you're trying to access does not exist in the class declaration.\").\n     * @param dropdown\n     */\n    closeDropDown(dropdown: NgbDropdown) {\n        if (dropdown) {\n            dropdown.close();\n        }\n    }\n}\n"]}]}