{"remainingRequest":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/thread-loader/dist/cjs.js??ref--10-2!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/ts-loader/index.js??ref--10-3!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/shared/refresh/refresh-selector.component.ts","dependencies":[{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/shared/refresh/refresh-selector.component.ts","mtime":1539162063844},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular2-template-loader/index.js","mtime":1536032724656},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/cache-loader/dist/cjs.js","mtime":1536032729131},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/thread-loader/dist/cjs.js","mtime":1536032751315},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/ts-loader/index.js","mtime":1536032751573},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js","mtime":1538211611370},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js","mtime":1536032751850}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar Rx_1 = require(\"rxjs/Rx\");\nvar refresh_service_1 = require(\"./refresh.service\");\nvar JhiRefreshSelectorComponent = /** @class */ (function () {\n    function JhiRefreshSelectorComponent(refreshService) {\n        this.refreshService = refreshService;\n        this.refreshTimes = [0, 5, 10, 30, 60, 300];\n        this.activeRefreshTime = this.refreshTimes[0];\n    }\n    JhiRefreshSelectorComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.activeRefreshTime = this.refreshService.getSelectedRefreshTime();\n        this.refreshChangedSubscription = this.refreshService.refreshChanged$.subscribe(function (empty) { return _this.launchTimer(true); });\n        this.launchTimer(false);\n    };\n    JhiRefreshSelectorComponent.prototype.ngOnDestroy = function () {\n        /** prevent memory leak when component destroyed **/\n        this.refreshChangedSubscription.unsubscribe();\n        if (this.refreshTimer) {\n            this.refreshTimer.unsubscribe();\n        }\n    };\n    JhiRefreshSelectorComponent.prototype.manualRefresh = function () {\n        this.refreshService.refreshReload();\n    };\n    /** Change active time only if exists, else 0 **/\n    JhiRefreshSelectorComponent.prototype.setActiveRefreshTime = function (time) {\n        if (time && this.refreshTimes.findIndex(function (t) { return t === time; }) !== -1) {\n            this.activeRefreshTime = time;\n        }\n        else {\n            this.activeRefreshTime = this.refreshTimes[0];\n        }\n        this.refreshService.storeSelectedRefreshTime(time);\n        this.refreshService.refreshChanged();\n    };\n    /** Init the timer **/\n    JhiRefreshSelectorComponent.prototype.subscribe = function () {\n        var _this = this;\n        if (this.activeRefreshTime && this.activeRefreshTime > 0) {\n            this.refreshTimer = Rx_1.Observable.interval(this.activeRefreshTime * 1000).subscribe(function () {\n                _this.refreshService.refreshReload();\n            });\n        }\n    };\n    /** Launch (or relaunch if true) the timer. **/\n    JhiRefreshSelectorComponent.prototype.launchTimer = function (relaunch) {\n        if (relaunch && this.refreshTimer) {\n            this.refreshTimer.unsubscribe();\n        }\n        this.subscribe();\n    };\n    /* ==========================================================================\n                                        UI PART\n     ========================================================================== */\n    JhiRefreshSelectorComponent.prototype.classTime = function () {\n        if (this.activeRefreshTime <= 0) {\n            return 'fa fa-pause';\n        }\n        return 'fa fa-repeat';\n    };\n    JhiRefreshSelectorComponent.prototype.stateTime = function (time) {\n        if (time === this.activeRefreshTime) {\n            return 'active';\n        }\n    };\n    JhiRefreshSelectorComponent.prototype.getActiveRefreshTime = function () {\n        if (this.activeRefreshTime <= 0) {\n            return 'disabled';\n        }\n        return this.activeRefreshTime + ' sec.';\n    };\n    JhiRefreshSelectorComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'jhi-refresh-selector',\n            templateUrl: './refresh-selector.component.html',\n            styleUrls: ['refresh-selector.component.scss']\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof refresh_service_1.JhiRefreshService !== \"undefined\" && refresh_service_1.JhiRefreshService) === \"function\" && _a || Object])\n    ], JhiRefreshSelectorComponent);\n    return JhiRefreshSelectorComponent;\n    var _a;\n}());\nexports.JhiRefreshSelectorComponent = JhiRefreshSelectorComponent;\n",{"version":3,"file":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/shared/refresh/refresh-selector.component.ts","sourceRoot":"","sources":["/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/shared/refresh/refresh-selector.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Observable } from 'rxjs/Rx';\nimport { JhiRefreshService } from './refresh.service';\n\n@Component({\n    selector: 'jhi-refresh-selector',\n    templateUrl: './refresh-selector.component.html',\n    styleUrls: ['refresh-selector.component.scss']\n})\nexport class JhiRefreshSelectorComponent implements OnInit, OnDestroy {\n    activeRefreshTime: number;\n    refreshTimes: number[];\n    refreshTimer: Subscription;\n    refreshChangedSubscription: Subscription;\n\n    constructor(private refreshService: JhiRefreshService) {\n        this.refreshTimes = [0, 5, 10, 30, 60, 300];\n        this.activeRefreshTime = this.refreshTimes[0];\n    }\n\n    ngOnInit() {\n        this.activeRefreshTime = this.refreshService.getSelectedRefreshTime();\n        this.refreshChangedSubscription = this.refreshService.refreshChanged$.subscribe((empty) => this.launchTimer(true));\n        this.launchTimer(false);\n    }\n\n    ngOnDestroy() {\n        /** prevent memory leak when component destroyed **/\n        this.refreshChangedSubscription.unsubscribe();\n        if (this.refreshTimer) {\n            this.refreshTimer.unsubscribe();\n        }\n    }\n\n    manualRefresh() {\n        this.refreshService.refreshReload();\n    }\n\n    /** Change active time only if exists, else 0 **/\n    setActiveRefreshTime(time: number) {\n        if (time && this.refreshTimes.findIndex((t) => t === time) !== -1) {\n            this.activeRefreshTime = time;\n        } else {\n            this.activeRefreshTime = this.refreshTimes[0];\n        }\n        this.refreshService.storeSelectedRefreshTime(time);\n        this.refreshService.refreshChanged();\n    }\n\n    /** Init the timer **/\n    subscribe() {\n        if (this.activeRefreshTime && this.activeRefreshTime > 0) {\n            this.refreshTimer = Observable.interval(this.activeRefreshTime * 1000).subscribe(() => {\n                this.refreshService.refreshReload();\n            });\n        }\n    }\n\n    /** Launch (or relaunch if true) the timer. **/\n    launchTimer(relaunch: boolean) {\n        if (relaunch && this.refreshTimer) {\n            this.refreshTimer.unsubscribe();\n        }\n        this.subscribe();\n    }\n\n    /* ==========================================================================\n                                        UI PART\n     ========================================================================== */\n\n    classTime(): string {\n        if (this.activeRefreshTime <= 0) {\n            return 'fa fa-pause';\n        }\n        return 'fa fa-repeat';\n    }\n\n    stateTime(time: number): string {\n        if (time === this.activeRefreshTime) {\n            return 'active';\n        }\n    }\n\n    getActiveRefreshTime(): string {\n        if (this.activeRefreshTime <= 0) {\n            return 'disabled';\n        }\n        return this.activeRefreshTime + ' sec.';\n    }\n}\n"]}]}