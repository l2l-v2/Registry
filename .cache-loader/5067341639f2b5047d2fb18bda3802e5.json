{"remainingRequest":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/thread-loader/dist/cjs.js??ref--10-2!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/ts-loader/index.js??ref--10-3!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/registry/config/config.component.ts","dependencies":[{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/registry/config/config.component.ts","mtime":1539162063840},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular2-template-loader/index.js","mtime":1536032724656},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/cache-loader/dist/cjs.js","mtime":1536032729131},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/thread-loader/dist/cjs.js","mtime":1536032751315},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/ts-loader/index.js","mtime":1536032751573},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js","mtime":1538211611370},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js","mtime":1536032751850}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar config_service_1 = require(\"./config.service\");\nvar profile_service_1 = require(\"app/layouts/profiles/profile.service\");\nvar _1 = require(\"../\");\nvar refresh_service_1 = require(\"app/shared/refresh/refresh.service\");\nvar JhiConfigComponent = /** @class */ (function () {\n    function JhiConfigComponent(configService, profileService, applicationsService, refreshService) {\n        this.configService = configService;\n        this.profileService = profileService;\n        this.applicationsService = applicationsService;\n        this.refreshService = refreshService;\n        this.application = 'application';\n        this.profile = 'prod';\n        this.label = 'master';\n        this.activeRegistryProfiles = [];\n        this.isNative = true;\n        this.applicationList = ['application'];\n    }\n    JhiConfigComponent.prototype.ngOnInit = function () {\n        this.load();\n        this.refresh();\n    };\n    JhiConfigComponent.prototype.ngOnDestroy = function () {\n        this.refreshReloadSubscription.unsubscribe();\n    };\n    JhiConfigComponent.prototype.load = function () {\n        var _this = this;\n        this.profileService.getProfileInfo().then(function (response) {\n            _this.activeRegistryProfiles = response.activeProfiles;\n            _this.isNative = _this.activeRegistryProfiles.includes('native');\n            _this.configurationSources = response.configurationSources;\n        });\n        this.refreshReloadSubscription = this.refreshService.refreshReload$.subscribe(function (empty) { return _this.refresh(); });\n    };\n    JhiConfigComponent.prototype.refresh = function () {\n        var _this = this;\n        this.configService.getConfigAsYaml(this.application, this.profile, this.label).subscribe(function (response) {\n            _this.configAsYaml = response;\n        }, function () {\n            _this.configAsYaml = '';\n        });\n        this.configService.getConfigAsProperties(this.application, this.profile, this.label).subscribe(function (response) {\n            _this.configAsProperties = response;\n            var keyValueArray = [];\n            _this.configAsProperties.split('\\n').forEach(function (property) {\n                var keyValueSplit = property.split(': ');\n                keyValueArray.push({ key: keyValueSplit[0], value: keyValueSplit[1] });\n            });\n            _this.configAsKeyValuePairs = keyValueArray;\n        }, function () {\n            _this.configAsProperties = '';\n        });\n        this.configService.getConfigAsJson(this.application, this.profile, this.label).subscribe(function (response) {\n            _this.configAsJson = response;\n        }, function () {\n            _this.configAsJson = {};\n        });\n        this.applicationsService.findAll().subscribe(function (data) {\n            if (data && data.applications) {\n                _this.applicationList = ['application'];\n                data.applications.forEach(function (application) {\n                    var instanceId = application.instances[0].instanceId;\n                    var applicationName;\n                    if (instanceId.indexOf(':') === -1) {\n                        applicationName = application.name.toLowerCase();\n                    }\n                    else {\n                        applicationName = instanceId.substr(0, instanceId.indexOf(':'));\n                    }\n                    _this.applicationList.push(applicationName);\n                });\n            }\n        });\n    };\n    JhiConfigComponent.prototype.getKeys = function (obj) {\n        return Object.keys(obj);\n    };\n    JhiConfigComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'jhi-config',\n            templateUrl: './config.component.html'\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof config_service_1.JhiConfigService !== \"undefined\" && config_service_1.JhiConfigService) === \"function\" && _a || Object, typeof (_b = typeof profile_service_1.ProfileService !== \"undefined\" && profile_service_1.ProfileService) === \"function\" && _b || Object, typeof (_c = typeof _1.JhiApplicationsService !== \"undefined\" && _1.JhiApplicationsService) === \"function\" && _c || Object, typeof (_d = typeof refresh_service_1.JhiRefreshService !== \"undefined\" && refresh_service_1.JhiRefreshService) === \"function\" && _d || Object])\n    ], JhiConfigComponent);\n    return JhiConfigComponent;\n    var _a, _b, _c, _d;\n}());\nexports.JhiConfigComponent = JhiConfigComponent;\n",{"version":3,"file":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/registry/config/config.component.ts","sourceRoot":"","sources":["/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/registry/config/config.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { JhiConfigService } from './config.service';\nimport { ProfileService } from 'app/layouts/profiles/profile.service';\nimport { JhiApplicationsService } from '../';\nimport { JhiRefreshService } from 'app/shared/refresh/refresh.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'jhi-config',\n    templateUrl: './config.component.html'\n})\nexport class JhiConfigComponent implements OnInit, OnDestroy {\n    application: string;\n    profile: string;\n    label: string;\n    activeRegistryProfiles: any;\n    isNative: boolean;\n    configurationSources: Array<any>;\n    configAsYaml: any;\n    configAsProperties: any;\n    configAsJson: any;\n    configAsKeyValuePairs: any;\n    applicationList: Array<string>;\n\n    refreshReloadSubscription: Subscription;\n\n    constructor(\n        private configService: JhiConfigService,\n        private profileService: ProfileService,\n        private applicationsService: JhiApplicationsService,\n        private refreshService: JhiRefreshService\n    ) {\n        this.application = 'application';\n        this.profile = 'prod';\n        this.label = 'master';\n        this.activeRegistryProfiles = [];\n        this.isNative = true;\n        this.applicationList = ['application'];\n    }\n\n    ngOnInit() {\n        this.load();\n        this.refresh();\n    }\n\n    ngOnDestroy() {\n        this.refreshReloadSubscription.unsubscribe();\n    }\n\n    load() {\n        this.profileService.getProfileInfo().then((response) => {\n            this.activeRegistryProfiles = response.activeProfiles;\n            this.isNative = this.activeRegistryProfiles.includes('native');\n            this.configurationSources = response.configurationSources;\n        });\n\n        this.refreshReloadSubscription = this.refreshService.refreshReload$.subscribe((empty) => this.refresh());\n    }\n\n    refresh() {\n        this.configService.getConfigAsYaml(this.application, this.profile, this.label).subscribe(\n            (response) => {\n                this.configAsYaml = response;\n            },\n            () => {\n                this.configAsYaml = '';\n            }\n        );\n\n        this.configService.getConfigAsProperties(this.application, this.profile, this.label).subscribe(\n            (response) => {\n                this.configAsProperties = response;\n\n                const keyValueArray = [];\n                this.configAsProperties.split('\\n').forEach((property) => {\n                    const keyValueSplit = property.split(': ');\n                    keyValueArray.push({ key: keyValueSplit[0], value: keyValueSplit[1] });\n                });\n                this.configAsKeyValuePairs = keyValueArray;\n            },\n            () => {\n                this.configAsProperties = '';\n            }\n        );\n\n        this.configService.getConfigAsJson(this.application, this.profile, this.label).subscribe(\n            (response) => {\n                this.configAsJson = response;\n            },\n            () => {\n                this.configAsJson = {};\n            }\n        );\n\n        this.applicationsService.findAll().subscribe((data) => {\n            if (data && data.applications) {\n                this.applicationList = ['application'];\n                data.applications.forEach((application) => {\n                    const instanceId = application.instances[0].instanceId;\n                    let applicationName;\n                    if (instanceId.indexOf(':') === -1) {\n                        applicationName = application.name.toLowerCase();\n                    } else {\n                        applicationName = instanceId.substr(0, instanceId.indexOf(':'));\n                    }\n                    this.applicationList.push(applicationName);\n                });\n            }\n        });\n    }\n\n    getKeys(obj: Object) {\n        return Object.keys(obj);\n    }\n}\n"]}]}