{"remainingRequest":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/thread-loader/dist/cjs.js??ref--10-2!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/ts-loader/index.js??ref--10-3!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/blocks/interceptor/auth.interceptor.ts","dependencies":[{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/blocks/interceptor/auth.interceptor.ts","mtime":1539162063836},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular2-template-loader/index.js","mtime":1536032724656},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/cache-loader/dist/cjs.js","mtime":1536032729131},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/thread-loader/dist/cjs.js","mtime":1536032751315},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/ts-loader/index.js","mtime":1536032751573},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js","mtime":1538211611370},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js","mtime":1536032751850}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AuthInterceptor = /** @class */ (function () {\n    function AuthInterceptor(localStorage, sessionStorage) {\n        this.localStorage = localStorage;\n        this.sessionStorage = sessionStorage;\n    }\n    AuthInterceptor.prototype.intercept = function (request, next) {\n        if (!request || !request.url || /^http/.test(request.url)) {\n            return next.handle(request);\n        }\n        var token = this.localStorage.retrieve('authenticationToken') || this.sessionStorage.retrieve('authenticationToken');\n        if (!!token) {\n            request = request.clone({\n                setHeaders: {\n                    Authorization: 'Bearer ' + token\n                }\n            });\n        }\n        return next.handle(request);\n    };\n    return AuthInterceptor;\n}());\nexports.AuthInterceptor = AuthInterceptor;\n",{"version":3,"file":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/blocks/interceptor/auth.interceptor.ts","sourceRoot":"","sources":["/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/blocks/interceptor/auth.interceptor.ts"],"names":[],"mappings":";;AAIA;IACI,yBAAoB,YAAiC,EAAU,cAAqC;QAAhF,iBAAY,GAAZ,YAAY,CAAqB;QAAU,mBAAc,GAAd,cAAc,CAAuB;IAAG,CAAC;IAExG,mCAAS,GAAT,UAAU,OAAyB,EAAE,IAAiB;QAClD,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACxD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAChC,CAAC;QAED,IAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,qBAAqB,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC;QACvH,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;gBACpB,UAAU,EAAE;oBACR,aAAa,EAAE,SAAS,GAAG,KAAK;iBACnC;aACJ,CAAC,CAAC;QACP,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;IACL,sBAAC;AAAD,CAAC,AAlBD,IAkBC;AAlBY,0CAAe","sourcesContent":["import { Observable } from 'rxjs/Observable';\nimport { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\n\nexport class AuthInterceptor implements HttpInterceptor {\n    constructor(private localStorage: LocalStorageService, private sessionStorage: SessionStorageService) {}\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (!request || !request.url || /^http/.test(request.url)) {\n            return next.handle(request);\n        }\n\n        const token = this.localStorage.retrieve('authenticationToken') || this.sessionStorage.retrieve('authenticationToken');\n        if (!!token) {\n            request = request.clone({\n                setHeaders: {\n                    Authorization: 'Bearer ' + token\n                }\n            });\n        }\n        return next.handle(request);\n    }\n}\n"]}]}