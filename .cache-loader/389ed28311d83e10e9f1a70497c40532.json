{"remainingRequest":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/thread-loader/dist/cjs.js??ref--10-2!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/ts-loader/index.js??ref--10-3!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/registry/encryption/encryption.service.ts","dependencies":[{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/registry/encryption/encryption.service.ts","mtime":1539162063844},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular2-template-loader/index.js","mtime":1536032724656},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/cache-loader/dist/cjs.js","mtime":1536032729131},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/thread-loader/dist/cjs.js","mtime":1536032751315},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/ts-loader/index.js","mtime":1536032751573},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js","mtime":1538211611370},{"path":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js","mtime":1536032751850}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/common/http\");\nvar JhiEncryptionService = /** @class */ (function () {\n    function JhiEncryptionService(http) {\n        this.http = http;\n    }\n    JhiEncryptionService.prototype.encrypt = function (textToEncrypt) {\n        return this.http.post('config/encrypt', textToEncrypt, { responseType: 'text' }).map(function (response) {\n            return '{cipher}' + response;\n        });\n    };\n    JhiEncryptionService.prototype.decrypt = function (textToDecrypt) {\n        return this.http.post('config/decrypt', textToDecrypt, { responseType: 'text' }).map(function (response) {\n            return response;\n        });\n    };\n    JhiEncryptionService = tslib_1.__decorate([\n        core_1.Injectable(),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" && _a || Object])\n    ], JhiEncryptionService);\n    return JhiEncryptionService;\n    var _a;\n}());\nexports.JhiEncryptionService = JhiEncryptionService;\n",{"version":3,"file":"/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/registry/encryption/encryption.service.ts","sourceRoot":"","sources":["/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/angular-router-loader/src/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/node_modules/tslint-loader/index.js!/home/bqzhu/Desktop/l2l-v2/l2l-registry/src/main/webapp/app/registry/encryption/encryption.service.ts"],"names":[],"mappings":";;;AAAA,sCAA2C;AAC3C,6CAAkD;AAIlD;IACI,8BAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAG,CAAC;IAExC,sCAAO,GAAP,UAAQ,aAAqB;QACzB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,aAAa,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,QAAgB;YAClG,MAAM,CAAC,UAAU,GAAG,QAAQ,CAAC;QACjC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,sCAAO,GAAP,UAAQ,aAAqB;QACzB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,aAAa,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,QAAgB;YAClG,MAAM,CAAC,QAAQ,CAAC;QACpB,CAAC,CAAC,CAAC;IACP,CAAC;IAbQ,oBAAoB;QADhC,iBAAU,EAAE;qEAEiB,iBAAU,oBAAV,iBAAU;OAD3B,oBAAoB,CAchC;IAAD,2BAAC;;CAAA,AAdD,IAcC;AAdY,oDAAoB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class JhiEncryptionService {\n    constructor(private http: HttpClient) {}\n\n    encrypt(textToEncrypt: string): Observable<string> {\n        return this.http.post('config/encrypt', textToEncrypt, { responseType: 'text' }).map((response: string) => {\n            return '{cipher}' + response;\n        });\n    }\n\n    decrypt(textToDecrypt: string): Observable<string> {\n        return this.http.post('config/decrypt', textToDecrypt, { responseType: 'text' }).map((response: string) => {\n            return response;\n        });\n    }\n}\n"]}]}